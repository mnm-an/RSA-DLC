rsa_project/
├── src/                    # Contient les fichiers source (.c)
│   ├── main.c              # Point d'entrée du programme
│   ├── test.c              # tester les fonctionnalités
│   ├── rsa.c               # Implémentation des fonctions liées à RSA
│   ├── math_utils.c        # Fonctions utilitaires mathématiques (ex: GCD, modular exponentiation)
│   └── prime_utils.c       # Fonctions de génération et de vérification des nombres premiers
├── include/                # Contient les fichiers d'en-tête (.h)
│   ├── rsa.h               # Déclarations des fonctions RSA
│   ├── math_utils.h        # Déclarations des fonctions utilitaires mathématiques
│   └── prime_utils.h       # Déclarations des fonctions liées aux nombres premiers
├── Makefile                # Script de compilation
└── README.md               # Documentation du projet



1 – Génération de clé :

    . generate_prime(mpz_t prime, unsigned int bits): Génère un nombre premier de la taille spécifiée.

    . is_prime(mpz_t n): Test de primalité pour vérifier si un nombre est premier.

    . gcd(mpz_t result, const mpz_t a, const mpz_t b): Calcule le PGCD de deux nombres.

    . generate_public_key(mpz_t e, const mpz_t phi): Génère l'exposant public e tel que 1<e<ϕ(n) et pgcd(e,ϕ(n)) == 1.

    . modular_inverse(mpz_t d, const mpz_t e, const mpz_t phi): Calcule l'inverse modulaire d tel que e⋅d≡1 mod ϕ(n)

2 – Chiffrement :

    . encrypt(mpz_t cipher, const mpz_t message, const mpz_t e, const mpz_t n): Chiffre un message en utilisant la clé publique.

3 – Déchiffrement/Signature en mode standard :

    . decrypt(mpz_t message, const mpz_t cipher, const mpz_t d, const mpz_t n): Déchiffre un message en utilisant la clé privée.

    . sign(mpz_t signature, const mpz_t message, const mpz_t d, const mpz_t n): Génère une signature pour un message.

4 – Déchiffrement/Signature en mode CRT :

    . decrypt_crt(mpz_t message, const mpz_t cipher, const mpz_t p, const mpz_t q, const mpz_t d_p, const mpz_t d_q, const mpz_t q_inv): Déchiffre un message en utilisant le CRT pour accélérer le calcul.

    . generate_crt_components(mpz_t d_p, mpz_t d_q, mpz_t q_inv, const mpz_t d, const mpz_t p, const mpz_t q): Calcule les composants dp, dq, et qinv nécessaires pour le CRT.

5 – Vérification de signature :

    . verify(mpz_t result, const mpz_t signature, const mpz_t e, const mpz_t n): Vérifie la validité d'une signature en la comparant au message original.
